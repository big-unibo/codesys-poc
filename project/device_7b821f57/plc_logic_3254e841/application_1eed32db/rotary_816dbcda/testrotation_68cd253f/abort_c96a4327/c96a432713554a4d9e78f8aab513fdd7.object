{"payload":{"meta":{"Graph":{"@Type":"81297157","@Value":{"Guid":"(Guid)c96a4327-1355-4a4d-9e78-f8aab513fdd7","ParentGuid":"(Guid)68cd253f-59e2-42e7-9295-c4007893c59a","Name":"(string)Abort","Properties":{"@Type":"2c41fa04:IDictionary","@Value":{}},"TypeGuid":"(Guid)f8a58466-d7f6-439f-bbb8-d4600e41d099","EmbeddedTypeGuids":{"@Type":"[Guid]","@Value":["(Guid)a9ed5b7e-75c5-4651-af16-d2c27e98cb94","(Guid)3b83b776-fb25-43b8-99f2-3c507c9143fc"]}}},"TypeInfos":{"2c41fa04":"{2c41fa04-1834-41c1-816e-303c7aa2c05b}","81297157":"{81297157-7ec9-45ce-845e-84cab2b88ade}","Guid":"System.Guid","string":"System.String"}},"object":{"Graph":{"@Type":"f8a58466","@Value":{"Implementation":{"@Type":"3b83b776","@Value":{"TextDocument":{"@Type":"f3878285","@Value":{"TextBlobForSerialisation":"(string)// TODO Abort and clean up the running testee and test\n \nAbort := TRUE;  // mandatory: signal abort completed","LineInfoPersistence":"(string)c96a4327-1355-4a4d-9e78-f8aab513fdd7_Impl_LineIds"}}}},"Interface":{"@Type":"a9ed5b7e","@Value":{"TextDocument":{"@Type":"f3878285","@Value":{"TextBlobForSerialisation":"(string)(*\n    Overwrite this method, to perform cleanup actions when the test is to be aborted\n    and return ``TRUE``, once you are finished.\n     \n    ``Abort()`` gets called to abort the current test. It is called repeatedly until it\n    returns ``TRUE``.\n     \n    **DO NOT CALL** the base implementation ``SUPER^.Abort``, as this will simply return ``TRUE``.\n     \n    :return: ``FALSE`` - abort not finished, ```TRUE`` - abort finished\n *)\nMETHOD PROTECTED Abort : BOOL\n","LineInfoPersistence":"(string)c96a4327-1355-4a4d-9e78-f8aab513fdd7_Decl_LineIds"}}}}}},"TypeInfos":{"3b83b776":"{3b83b776-fb25-43b8-99f2-3c507c9143fc}","a9ed5b7e":"{a9ed5b7e-75c5-4651-af16-d2c27e98cb94}","f3878285":"{f3878285-8e4f-490b-bb1b-9acbb7eb04db}","f8a58466":"{f8a58466-d7f6-439f-bbb8-d4600e41d099}","string":"System.String"}}},"FormatVersion":"1.0"}